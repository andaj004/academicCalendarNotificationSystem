name: CI-CD to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # manual trigger if you ever need it

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  build-test-deploy:
    name: Build, Test, Deploy (Self-hosted EC2)
    runs-on: [self-hosted, ec2, app]

    env:
      APP_DIR: /home/ubuntu/app
      NGINX_HTML_DIR: /var/www/academiccalendar
      PM2_APP_NAME: academic-backend
      # Frontend build-time API base (set as repo secret)
      REACT_APP_API_URL: ${{ secrets.FRONTEND_API_URL }}
      # Multiline backend env written to backend/.env (set as repo secret)
      BACKEND_ENV: ${{ secrets.BACKEND_ENV }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure base dirs and tools
        run: |
          sudo mkdir -p "$NGINX_HTML_DIR"
          sudo chown -R "$USER:$USER" "$NGINX_HTML_DIR"
          mkdir -p "$APP_DIR"
          if ! command -v rsync >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y rsync
          fi

      - name: Sync repo to APP_DIR (preserve backend/.env)
        run: |
          rsync -a --delete \
            --exclude='.git' \
            --exclude='backend/.env' \
            ./ "$APP_DIR/"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # ---------- CI: Backend tests ----------
      - name: Install backend deps (dev)
        working-directory: ${{ env.APP_DIR }}/backend
        run: npm ci

      - name: Run backend tests
        working-directory: ${{ env.APP_DIR }}/backend
        run: npm test

      # ---------- CI: Frontend build ----------
      - name: Install frontend deps
        working-directory: ${{ env.APP_DIR }}/frontend
        run: npm ci

      - name: Build frontend
        working-directory: ${{ env.APP_DIR }}/frontend
        env:
          REACT_APP_API_URL: ${{ env.REACT_APP_API_URL }}
          NODE_OPTIONS: --max-old-space-size=512
        run: npm run build

      # ---------- Deploy: Frontend to Nginx ----------
      - name: Deploy frontend to Nginx
        working-directory: ${{ env.APP_DIR }}/frontend
        run: sudo rsync -a --delete build/ "$NGINX_HTML_DIR/"

      # ---------- Secrets: write/refresh backend .env from secret ----------
      - name: Write backend .env from secret (overwrites if exists)
        working-directory: ${{ env.APP_DIR }}/backend
        run: |
          echo "$BACKEND_ENV" > .env
          chmod 600 .env
          echo "Wrote $(pwd)/.env"
          tail -n +1 .env | sed -e 's/=.*$/=***redacted***/'

      # ---------- Deploy: Backend with PM2 ----------
      - name: Install backend deps (prod)
        working-directory: ${{ env.APP_DIR }}/backend
        env:
          NODE_ENV: production
        run: npm ci --omit=dev

      - name: Start/Restart backend with PM2 (robust)
        run: |
            # Ensure pm2 available and systemd unit installed for this user
            if ! command -v pm2 >/dev/null 2>&1; then
            sudo npm i -g pm2
            fi

            # Create PM2 systemd service if missing (idempotent)
            if ! systemctl status pm2-$USER >/dev/null 2>&1; then
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u "$USER" --hp "$HOME"
            fi

            # Start cleanly with absolute path to avoid cwd surprises
            pm2 stop "$PM2_APP_NAME" >/dev/null 2>&1 || true
            pm2 delete "$PM2_APP_NAME" >/dev/null 2>&1 || true
            pm2 start "$BACKEND_DIR/server.js" --name "$PM2_APP_NAME"

            # Persist process list so it auto-resurrects after reboot
            pm2 save

            # Sanity print
            pm2 status

      # ---------- Health check ----------
      - name: Health check API
        run: |
          sleep 2
          curl -fsS http://127.0.0.1:5001/ || exit 0
          # If you add /api/health, prefer: curl -fsS http://127.0.0.1:5001/api/health
